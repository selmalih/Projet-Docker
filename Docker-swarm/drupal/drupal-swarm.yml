# Version de la syntaxe du fichier docker-compose.
# Utilisez la version 3.8 ou supérieure pour prendre en charge les fonctionnalités de Docker Swarm.
version: '3.8'

# Définition des services à déployer.
services:
  # Service pour Drupal.
  drupal:
    # Montage des volumes pour persister les données.
    volumes:
      - drupal:/var/www/html  # Le volume 'drupal' est monté dans le conteneur pour stocker les fichiers de Drupal.
    # Image Docker à utiliser pour ce service.
    image: drupal:8-apache  # Utilise l'image officielle de Drupal 8 avec Apache.
    # Exposition des ports.
    ports:
      - "8080:80"  # Le port 80 du conteneur est exposé sur le port 8080 de l'hôte.
    # Réseaux auxquels le service est connecté.
    networks:
      - net  # Le service est connecté au réseau 'net'.
    # Configuration spécifique au déploiement Swarm.
    deploy:
      replicas: 4  # Nombre de réplicas (instances) du service à exécuter.
      update_config:
        parallelism: 2  # Nombre de conteneurs à mettre à jour en parallèle.
        delay: 10s  # Délai entre les mises à jour des conteneurs.
      restart_policy:
        condition: on-failure  # Redémarre le conteneur uniquement en cas d'échec.

  # Service pour PostgreSQL.
  postgres:
    # Image Docker à utiliser pour ce service.
    image: postgres:10  # Utilise l'image officielle de PostgreSQL version 10.
    # Variables d'environnement pour configurer PostgreSQL.
    environment:
      POSTGRES_PASSWORD: example  # Définit le mot de passe de l'utilisateur PostgreSQL.
    # Montage des volumes pour persister les données de la base de données.
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Le volume 'postgres_data' est monté pour stocker les données de PostgreSQL.
    # Réseaux auxquels le service est connecté.
    networks:
      - net  # Le service est connecté au réseau 'net'.
    # Configuration spécifique au déploiement Swarm.
    deploy:
      replicas: 1  # Nombre de réplicas (instances) du service à exécuter.
      placement:
        constraints:
          - node.role == manager  # PostgreSQL doit s'exécuter uniquement sur un nœud manager.
      restart_policy:
        condition: on-failure  # Redémarre le conteneur uniquement en cas d'échec.

# Définition des volumes utilisés par les services.
volumes:
  drupal:
    driver: local  # Utilise un pilote local pour le volume 'drupal'.
  postgres_data:
    driver: local  # Utilise un pilote local pour le volume 'postgres_data'.

# Définition des réseaux utilisés par les services.
networks:
  net:
    driver: overlay  # Utilise un réseau overlay pour permettre la communication entre les services sur plusieurs nœuds dans un cluster Swarm.